/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __CUDATRACERPROBE_BPF_SKEL_H__
#define __CUDATRACERPROBE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct CudaTracerProbe_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *ringbuf;
	} maps;
	struct {
		struct bpf_program *handle_cudaMemcpy;
	} progs;
	struct {
		struct bpf_link *handle_cudaMemcpy;
	} links;

#ifdef __cplusplus
	static inline struct CudaTracerProbe_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct CudaTracerProbe_bpf *open_and_load();
	static inline int load(struct CudaTracerProbe_bpf *skel);
	static inline int attach(struct CudaTracerProbe_bpf *skel);
	static inline void detach(struct CudaTracerProbe_bpf *skel);
	static inline void destroy(struct CudaTracerProbe_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
CudaTracerProbe_bpf__destroy(struct CudaTracerProbe_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
CudaTracerProbe_bpf__create_skeleton(struct CudaTracerProbe_bpf *obj);

static inline struct CudaTracerProbe_bpf *
CudaTracerProbe_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct CudaTracerProbe_bpf *obj;
	int err;

	obj = (struct CudaTracerProbe_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = CudaTracerProbe_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	CudaTracerProbe_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct CudaTracerProbe_bpf *
CudaTracerProbe_bpf__open(void)
{
	return CudaTracerProbe_bpf__open_opts(NULL);
}

static inline int
CudaTracerProbe_bpf__load(struct CudaTracerProbe_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct CudaTracerProbe_bpf *
CudaTracerProbe_bpf__open_and_load(void)
{
	struct CudaTracerProbe_bpf *obj;
	int err;

	obj = CudaTracerProbe_bpf__open();
	if (!obj)
		return NULL;
	err = CudaTracerProbe_bpf__load(obj);
	if (err) {
		CudaTracerProbe_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
CudaTracerProbe_bpf__attach(struct CudaTracerProbe_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
CudaTracerProbe_bpf__detach(struct CudaTracerProbe_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *CudaTracerProbe_bpf__elf_bytes(size_t *sz);

static inline int
CudaTracerProbe_bpf__create_skeleton(struct CudaTracerProbe_bpf *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "CudaTracerProbe_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = "ringbuf";
	map->map = &obj->maps.ringbuf;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "handle_cudaMemcpy";
	s->progs[0].prog = &obj->progs.handle_cudaMemcpy;
	s->progs[0].link = &obj->links.handle_cudaMemcpy;

	s->data = CudaTracerProbe_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *CudaTracerProbe_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xe0\x0a\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x09\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x74\
\x65\x78\x74\0\x75\x70\x72\x6f\x62\x65\x2f\x63\x75\x64\x61\x4d\x65\x6d\x63\x70\
\x79\0\x2e\x6d\x61\x70\x73\0\x43\x75\x64\x61\x54\x72\x61\x63\x65\x72\x50\x72\
\x6f\x62\x65\x2e\x62\x70\x66\x2e\x63\0\x4c\x42\x42\x31\x5f\x32\0\x68\x61\x6e\
\x64\x6c\x65\x5f\x63\x75\x64\x61\x4d\x65\x6d\x63\x70\x79\0\x70\x6f\x70\x75\x6c\
\x61\x74\x65\x5f\x70\x72\x6f\x63\x5f\x69\x6e\x66\x6f\0\x72\x69\x6e\x67\x62\x75\
\x66\0\x2e\x72\x65\x6c\x75\x70\x72\x6f\x62\x65\x2f\x63\x75\x64\x61\x4d\x65\x6d\
\x63\x70\x79\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2f\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x45\0\0\0\0\0\x04\0\xc0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x4c\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\
\x5e\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\x71\0\0\0\x11\0\x05\0\
\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xbf\x16\0\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\
\0\0\0\x20\0\0\0\x63\x06\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\xbf\x17\0\0\0\0\0\0\x18\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x28\0\0\0\xb7\x03\0\0\0\0\0\0\x85\
\0\0\0\x83\0\0\0\xbf\x06\0\0\0\0\0\0\x15\x06\x10\0\0\0\0\0\x79\x71\x70\0\0\0\0\
\0\x7b\x16\x08\0\0\0\0\0\x79\x71\x68\0\0\0\0\0\x7b\x16\0\0\0\0\0\0\x79\x71\x60\
\0\0\0\0\0\x7b\x16\x18\0\0\0\0\0\x79\x71\x58\0\0\0\0\0\x63\x16\x20\0\0\0\0\0\
\x85\0\0\0\x05\0\0\0\x7b\x06\x10\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\
\0\0\x63\x06\x24\0\0\0\0\0\xbf\x61\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\x85\0\0\0\
\x84\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x54\x02\
\0\0\x54\x02\0\0\xa3\x03\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\
\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x1b\0\0\0\
\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\0\0\0\
\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\0\0\x01\0\0\0\0\x02\0\0\x04\x10\0\0\0\
\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x2a\0\0\0\0\0\0\x0e\
\x07\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x02\x0a\0\0\0\x32\0\0\0\x01\0\0\x04\x04\0\0\
\0\x42\0\0\0\x0b\0\0\0\0\0\0\0\x46\0\0\0\0\0\0\x08\x0c\0\0\0\x4c\0\0\0\0\0\0\
\x08\x02\0\0\0\0\0\0\0\x01\0\0\x0d\0\0\0\0\x5b\0\0\0\x09\0\0\0\x67\0\0\0\x01\0\
\0\x0c\x0d\0\0\0\0\0\0\0\0\0\0\x02\x10\0\0\0\x7a\0\0\0\x15\0\0\x04\xa8\0\0\0\
\x82\0\0\0\x11\0\0\0\0\0\0\0\x86\0\0\0\x11\0\0\0\x40\0\0\0\x8a\0\0\0\x11\0\0\0\
\x80\0\0\0\x8e\0\0\0\x11\0\0\0\xc0\0\0\0\x92\0\0\0\x11\0\0\0\0\x01\0\0\x95\0\0\
\0\x11\0\0\0\x40\x01\0\0\x98\0\0\0\x11\0\0\0\x80\x01\0\0\x9c\0\0\0\x11\0\0\0\
\xc0\x01\0\0\xa0\0\0\0\x11\0\0\0\0\x02\0\0\xa3\0\0\0\x11\0\0\0\x40\x02\0\0\xa6\
\0\0\0\x11\0\0\0\x80\x02\0\0\xa9\0\0\0\x11\0\0\0\xc0\x02\0\0\xac\0\0\0\x11\0\0\
\0\0\x03\0\0\xaf\0\0\0\x11\0\0\0\x40\x03\0\0\xb2\0\0\0\x11\0\0\0\x80\x03\0\0\
\xb5\0\0\0\x11\0\0\0\xc0\x03\0\0\xbd\0\0\0\x11\0\0\0\0\x04\0\0\xc0\0\0\0\x11\0\
\0\0\x40\x04\0\0\xc3\0\0\0\x11\0\0\0\x80\x04\0\0\xc9\0\0\0\x11\0\0\0\xc0\x04\0\
\0\xcc\0\0\0\x11\0\0\0\0\x05\0\0\xcf\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\
\0\x01\0\0\x0d\x02\0\0\0\xe1\0\0\0\x0f\0\0\0\xe5\0\0\0\x01\0\0\x0c\x12\0\0\0\
\x85\x03\0\0\x01\0\0\x0f\x10\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\x69\x6e\x74\0\
\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\
\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x72\x69\x6e\
\x67\x62\x75\x66\0\x43\x75\x64\x61\x50\x72\x6f\x63\x65\x73\x73\x49\x6e\x66\x6f\
\0\x70\x69\x64\0\x70\x69\x64\x5f\x74\0\x5f\x5f\x6b\x65\x72\x6e\x65\x6c\x5f\x70\
\x69\x64\x5f\x74\0\x70\x72\x6f\x63\x65\x73\x73\x49\x6e\x66\x6f\0\x70\x6f\x70\
\x75\x6c\x61\x74\x65\x5f\x70\x72\x6f\x63\x5f\x69\x6e\x66\x6f\0\x70\x74\x5f\x72\
\x65\x67\x73\0\x72\x31\x35\0\x72\x31\x34\0\x72\x31\x33\0\x72\x31\x32\0\x62\x70\
\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\x72\x38\0\x61\x78\0\x63\x78\
\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\x69\x67\x5f\x61\x78\0\x69\x70\0\x63\
\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\x73\0\x6c\x6f\x6e\x67\x20\x75\x6e\
\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\x74\0\x63\x74\x78\0\x68\x61\x6e\x64\x6c\
\x65\x5f\x63\x75\x64\x61\x4d\x65\x6d\x63\x70\x79\0\x2f\x68\x6f\x6d\x65\x2f\x64\
\x65\x6e\x7a\x65\x6c\x67\x66\x61\x72\x6d\x65\x72\x2f\x65\x62\x70\x66\x2d\x63\
\x75\x64\x61\x2f\x43\x75\x64\x61\x54\x72\x61\x63\x65\x72\x2f\x73\x72\x63\x2f\
\x70\x72\x6f\x62\x65\x2f\x43\x75\x64\x61\x54\x72\x61\x63\x65\x72\x50\x72\x6f\
\x62\x65\x2e\x62\x70\x66\x2e\x63\0\x76\x6f\x69\x64\x20\x70\x6f\x70\x75\x6c\x61\
\x74\x65\x5f\x70\x72\x6f\x63\x5f\x69\x6e\x66\x6f\x28\x73\x74\x72\x75\x63\x74\
\x20\x43\x75\x64\x61\x50\x72\x6f\x63\x65\x73\x73\x49\x6e\x66\x6f\x20\x2a\x70\
\x72\x6f\x63\x65\x73\x73\x49\x6e\x66\x6f\x29\0\x20\x20\x20\x20\x70\x72\x6f\x63\
\x65\x73\x73\x49\x6e\x66\x6f\x2d\x3e\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\
\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\
\x64\x28\x29\x20\x3e\x3e\x20\x33\x32\x3b\0\x7d\0\x69\x6e\x74\x20\x68\x61\x6e\
\x64\x6c\x65\x5f\x63\x75\x64\x61\x4d\x65\x6d\x63\x70\x79\x28\x73\x74\x72\x75\
\x63\x74\x20\x70\x74\x5f\x72\x65\x67\x73\x20\x2a\x63\x74\x78\x29\0\x20\x20\x20\
\x20\x65\x76\x65\x6e\x74\x20\x3d\x20\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\
\x66\x5f\x72\x65\x73\x65\x72\x76\x65\x28\x26\x72\x69\x6e\x67\x62\x75\x66\x2c\
\x20\x73\x69\x7a\x65\x6f\x66\x28\x73\x74\x72\x75\x63\x74\x20\x43\x75\x64\x61\
\x4d\x65\x6d\x63\x70\x79\x45\x76\x65\x6e\x74\x29\x2c\x20\x30\x29\x3b\0\x20\x20\
\x20\x20\x69\x66\x20\x28\x21\x65\x76\x65\x6e\x74\x29\x20\x7b\0\x20\x20\x20\x20\
\x65\x76\x65\x6e\x74\x2d\x3e\x64\x65\x73\x74\x69\x6e\x61\x74\x69\x6f\x6e\x20\
\x3d\x20\x28\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x29\x50\x54\
\x5f\x52\x45\x47\x53\x5f\x50\x41\x52\x4d\x31\x28\x63\x74\x78\x29\x3b\0\x20\x20\
\x20\x20\x65\x76\x65\x6e\x74\x2d\x3e\x73\x6f\x75\x72\x63\x65\x20\x3d\x20\x28\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x29\x50\x54\x5f\x52\x45\
\x47\x53\x5f\x50\x41\x52\x4d\x32\x28\x63\x74\x78\x29\x3b\0\x20\x20\x20\x20\x65\
\x76\x65\x6e\x74\x2d\x3e\x73\x69\x7a\x65\x20\x3d\x20\x28\x73\x69\x7a\x65\x5f\
\x74\x29\x50\x54\x5f\x52\x45\x47\x53\x5f\x50\x41\x52\x4d\x33\x28\x63\x74\x78\
\x29\x3b\0\x20\x20\x20\x20\x65\x76\x65\x6e\x74\x2d\x3e\x64\x69\x72\x65\x63\x74\
\x69\x6f\x6e\x20\x3d\x20\x28\x65\x6e\x75\x6d\x20\x63\x75\x64\x61\x4d\x65\x6d\
\x63\x70\x79\x4b\x69\x6e\x64\x29\x50\x54\x5f\x52\x45\x47\x53\x5f\x50\x41\x52\
\x4d\x34\x28\x63\x74\x78\x29\x3b\0\x20\x20\x20\x20\x65\x76\x65\x6e\x74\x2d\x3e\
\x74\x69\x6d\x65\x73\x74\x61\x6d\x70\x20\x3d\x20\x62\x70\x66\x5f\x6b\x74\x69\
\x6d\x65\x5f\x67\x65\x74\x5f\x6e\x73\x28\x29\x3b\0\x20\x20\x20\x20\x62\x70\x66\
\x5f\x72\x69\x6e\x67\x62\x75\x66\x5f\x73\x75\x62\x6d\x69\x74\x28\x65\x76\x65\
\x6e\x74\x2c\x20\x30\x29\x3b\0\x30\x3a\x31\x34\0\x30\x3a\x31\x33\0\x30\x3a\x31\
\x32\0\x30\x3a\x31\x31\0\x2e\x6d\x61\x70\x73\0\x2e\x74\x65\x78\x74\0\x75\x70\
\x72\x6f\x62\x65\x2f\x63\x75\x64\x61\x4d\x65\x6d\x63\x70\x79\0\0\x9f\xeb\x01\0\
\x20\0\0\0\0\0\0\0\x24\0\0\0\x24\0\0\0\x84\x01\0\0\xa8\x01\0\0\x4c\0\0\0\x08\0\
\0\0\x8b\x03\0\0\x01\0\0\0\0\0\0\0\x0e\0\0\0\x91\x03\0\0\x01\0\0\0\0\0\0\0\x13\
\0\0\0\x10\0\0\0\x8b\x03\0\0\x05\0\0\0\0\0\0\0\xf7\0\0\0\x40\x01\0\0\0\x54\0\0\
\x08\0\0\0\xf7\0\0\0\x7d\x01\0\0\x18\x5c\0\0\x10\0\0\0\xf7\0\0\0\x7d\x01\0\0\
\x33\x5c\0\0\x18\0\0\0\xf7\0\0\0\x7d\x01\0\0\x16\x5c\0\0\x20\0\0\0\xf7\0\0\0\
\xb6\x01\0\0\x01\x60\0\0\x91\x03\0\0\x12\0\0\0\0\0\0\0\xf7\0\0\0\xb8\x01\0\0\0\
\x70\0\0\x08\0\0\0\xf7\0\0\0\xe3\x01\0\0\x0d\x80\0\0\x38\0\0\0\xf7\0\0\0\x31\
\x02\0\0\x09\x84\0\0\x40\0\0\0\xf7\0\0\0\x43\x02\0\0\x29\x98\0\0\x48\0\0\0\xf7\
\0\0\0\x43\x02\0\0\x18\x98\0\0\x50\0\0\0\xf7\0\0\0\x7f\x02\0\0\x24\x9c\0\0\x58\
\0\0\0\xf7\0\0\0\x7f\x02\0\0\x13\x9c\0\0\x60\0\0\0\xf7\0\0\0\xb6\x02\0\0\x1b\
\xa0\0\0\x68\0\0\0\xf7\0\0\0\xb6\x02\0\0\x11\xa0\0\0\x70\0\0\0\xf7\0\0\0\xe4\
\x02\0\0\x2d\xa4\0\0\x78\0\0\0\xf7\0\0\0\xe4\x02\0\0\x16\xa4\0\0\x80\0\0\0\xf7\
\0\0\0\x24\x03\0\0\x18\xa8\0\0\x88\0\0\0\xf7\0\0\0\x24\x03\0\0\x16\xa8\0\0\x90\
\0\0\0\xf7\0\0\0\x7d\x01\0\0\x18\x5c\0\0\x98\0\0\0\xf7\0\0\0\x7d\x01\0\0\x33\
\x5c\0\0\xa0\0\0\0\xf7\0\0\0\x7d\x01\0\0\x16\x5c\0\0\xa8\0\0\0\xf7\0\0\0\x4f\
\x03\0\0\x05\xb8\0\0\xc0\0\0\0\xf7\0\0\0\xb6\x01\0\0\x01\xc4\0\0\x10\0\0\0\x91\
\x03\0\0\x04\0\0\0\x40\0\0\0\x10\0\0\0\x71\x03\0\0\0\0\0\0\x50\0\0\0\x10\0\0\0\
\x76\x03\0\0\0\0\0\0\x60\0\0\0\x10\0\0\0\x7b\x03\0\0\0\0\0\0\x70\0\0\0\x10\0\0\
\0\x80\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x9d\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\0\0\0\0\0\0\0\xc0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x01\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xc8\x01\0\0\0\0\0\0\xd0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x29\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x98\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x79\0\0\0\x09\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x02\0\0\0\0\
\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x8f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x02\0\0\0\0\0\0\x0f\
\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x94\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\x08\0\0\0\0\0\0\x14\x02\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct CudaTracerProbe_bpf *CudaTracerProbe_bpf::open(const struct bpf_object_open_opts *opts) { return CudaTracerProbe_bpf__open_opts(opts); }
struct CudaTracerProbe_bpf *CudaTracerProbe_bpf::open_and_load() { return CudaTracerProbe_bpf__open_and_load(); }
int CudaTracerProbe_bpf::load(struct CudaTracerProbe_bpf *skel) { return CudaTracerProbe_bpf__load(skel); }
int CudaTracerProbe_bpf::attach(struct CudaTracerProbe_bpf *skel) { return CudaTracerProbe_bpf__attach(skel); }
void CudaTracerProbe_bpf::detach(struct CudaTracerProbe_bpf *skel) { CudaTracerProbe_bpf__detach(skel); }
void CudaTracerProbe_bpf::destroy(struct CudaTracerProbe_bpf *skel) { CudaTracerProbe_bpf__destroy(skel); }
const void *CudaTracerProbe_bpf::elf_bytes(size_t *sz) { return CudaTracerProbe_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
CudaTracerProbe_bpf__assert(struct CudaTracerProbe_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __CUDATRACERPROBE_BPF_SKEL_H__ */
